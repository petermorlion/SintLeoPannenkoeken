@using SintLeoPannenkoeken.Blazor.Client.Server
@using SintLeoPannenkoeken.Blazor.Client.Auth
@using SintLeoPannenkoeken.Blazor.Client.Server.Contracts
@typeparam TDto

<PageTitle>@Title</PageTitle>

<MudStack Row="true" Breakpoint="Breakpoint.Xs">
    <h1>@Title</h1>
    @if (IsForScoutsjaar)
    {
            <MudSelect @bind-Value="_selectedScoutsjaar" FitContent="true">
                @foreach (var scoutsjaar in _scoutsjaren)
                {
                    <MudSelectItem Value="scoutsjaar">@scoutsjaar.Begin</MudSelectItem>
                }
            </MudSelect>
    }
</MudStack>

<RoleAuthorizedView Roles="@AuthorizedRoles">
    @ContentBeforeData
    <MudExpansionPanels>
        <MudExpansionPanel Text="@NewItemTitle" Expanded="@NewItemExpanded">
            <MudForm @bind-IsValid="_isFormValid" @ref="_form">
                <MudGrid>
                    @NewItemFormElements
                    <MudItem xs="12">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_isFormValid)" OnClick="@Create">Opslaan</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@OnCancel">Annuleren</MudButton>
                    </MudItem>
                </MudGrid>
            </MudForm>
        </MudExpansionPanel>
    </MudExpansionPanels>
    <MudDataGrid T="@TDto" 
                 Items="@_data" 
                 SortMode="SortMode.Multiple" 
                 Filterable="true" 
                 MultiSelection="false"
                 RowsPerPage="500"
                 ReadOnly="false"
                 EditMode="DataGridEditMode.Form"
                 EditTrigger="DataGridEditTrigger.Manual"
                 CommittedItemChanges="@OnUpdate">
        <Columns>
            @Columns
            @if (CanEdit)
            {
                <TemplateColumn T="TDto" CellClass="d-flex justify-end">
                    <CellTemplate>
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
                    </CellTemplate>
                </TemplateColumn>
            }
        </Columns>
        <PagerContent>
            <MudDataGridPager T="TDto" />
        </PagerContent>
    </MudDataGrid>
    @ContentAfterData
    
</RoleAuthorizedView>

@code {
    private IEnumerable<TDto> _data = new List<TDto>();
    private IEnumerable<ScoutsjaarDto> _scoutsjaren = new List<ScoutsjaarDto>();
    private ScoutsjaarDto _selectedScoutsjaar;

    private bool _isFormValid;
    private MudForm _form = default!;

    [Inject]
    private IServerData _serverData { get; set; } = default!;

    [Parameter]
    public string Title { get; set; } = "";

    [Parameter]
    public string AuthorizedRoles { get; set; } = "";

    [Parameter]
    public RenderFragment ContentBeforeData { get; set; } = builder => { };

    /// <summary>
    /// Elements for the new item form, to be placed in a MudGrid. The
    /// save and cancel buttons will be added automatically.
    /// </summary>
    [Parameter]
    public RenderFragment NewItemFormElements { get; set; } = builder => { };

    [Parameter]
    public string NewItemTitle { get; set; } = "Nieuw";

    [Parameter]
    public bool NewItemExpanded { get; set; } = false;

    [Parameter]
    public RenderFragment Columns { get; set; } = builder => { };

    [Parameter]
    public RenderFragment ContentAfterData { get; set; } = builder => { };

    [Parameter]
    [EditorRequired]
    public Func<IServerData, Task<IEnumerable<TDto>>> DataProvider { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public Func<Task<TDto>> OnCreate { get; set; } = default!;

    [Parameter]
    public EventCallback<TDto> OnUpdate { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public bool CanEdit { get; set; }

    [Parameter]
    public bool IsForScoutsjaar { get; set; } = false;

    [Inject]
    public IServerData ServerData { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        _data = await DataProvider(ServerData);
        if (IsForScoutsjaar)
        {
            _scoutsjaren = await _serverData.GetScoutsjaren();
            if (_scoutsjaren.Any())
            {
                _selectedScoutsjaar = _scoutsjaren.First();
            }
        }
    }

    async Task Create()
    {
        await _form.Validate();
        if (_form.IsValid)
        {
            var result = await OnCreate();
            AddItem(result);
        }
    }

    public void AddItem(TDto item)
    {
        var dataList = _data.ToList();
        dataList.Add(item);
        _data = dataList;
    }
}
