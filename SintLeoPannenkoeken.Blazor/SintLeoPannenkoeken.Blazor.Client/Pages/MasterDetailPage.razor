@using SintLeoPannenkoeken.Blazor.Client.Components
@using SintLeoPannenkoeken.Blazor.Client.Server
@using SintLeoPannenkoeken.Blazor.Client.Auth
@using SintLeoPannenkoeken.Blazor.Client.Server.Contracts
@typeparam TDto
@implements IDisposable

<PageTitle>@Title</PageTitle>

<MudStack Row="true" Breakpoint="Breakpoint.Xs">
    <h1>@Title</h1>
    @if (IsForScoutsjaar)
    {
        <MudSelect @bind-Value="_selectedScoutsjaarBegin"
                   @bind-Value:after="OnSelectedScoutsjaarChanged"
                   FitContent="true"
                   QuickSearchInterval="TimeSpan.FromSeconds(1)">
            @foreach (var scoutsjaar in _scoutsjaren)
            {
                <MudSelectItem Value="@scoutsjaar.Begin">@scoutsjaar.Begin</MudSelectItem>
            }
        </MudSelect>
    }
</MudStack>

<RoleAuthorizedView Roles="@AuthorizedRoles">
    @ContentBeforeData
    <MudExpansionPanels>
        <MudExpansionPanel Text="@NewItemTitle" Expanded="@NewItemExpanded">
            <MudForm @bind-IsValid="_isFormValid" @ref="_form">
                <MudGrid>
                    @NewItemFormElements
                    <MudItem xs="12">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_isFormValid)" OnClick="@Create">Opslaan</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@OnCancel">Annuleren</MudButton>
                    </MudItem>
                </MudGrid>
            </MudForm>
        </MudExpansionPanel>
    </MudExpansionPanels>
    <MudDataGrid T="@TDto" 
                 Items="@_data" 
                 SortMode="SortMode.Multiple" 
                 Filterable="true" 
                 MultiSelection="false"
                 RowsPerPage="500"
                 ReadOnly="false"
                 EditMode="DataGridEditMode.Form"
                 EditTrigger="DataGridEditTrigger.Manual"
                 CommittedItemChanges="@Update"
                 Dense="true"
                 Striped="true"
                 Loading="_loadingData"
                 @ref="_grid">
        <Columns>
            @Columns
            @if (CanEdit || CanDelete)
            {
                <TemplateColumn T="TDto" CellClass="d-flex justify-end">
                    <CellTemplate>
                         @if (CanEdit)
                        {
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Color="Color.Primary" OnClick="@context.Actions.StartEditingItemAsync" title="Bewerken" />
                        }           
                        @if (CanDelete)
                        {
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="async () => await Delete(context.Item)" title="Verwijderen" />
                        }
                    </CellTemplate>
                </TemplateColumn>
            }
        </Columns>
        <PagerContent>
            <MudDataGridPager T="TDto" />
        </PagerContent>
    </MudDataGrid>
    @ContentAfterData
    
</RoleAuthorizedView>

@code {
    private bool _loadingData = false;
    private IList<TDto> _data = new List<TDto>();
    private PersistingComponentStateSubscription _persistingSubscription;

    private IEnumerable<ScoutsjaarDto> _scoutsjaren = new List<ScoutsjaarDto>();
    private int _selectedScoutsjaarBegin;

    private bool _isFormValid;
    private MudForm _form = default!;
    private MudDataGrid<TDto> _grid = default!;

    [Inject]
    private IServerData _serverData { get; set; } = default!;

    [Inject]
    private PersistentComponentState ApplicationState { get; set; } = default!;

    [Parameter]
    public string Title { get; set; } = "";

    [Parameter]
    public string AuthorizedRoles { get; set; } = "";

    [Parameter]
    public RenderFragment ContentBeforeData { get; set; } = builder => { };

    /// <summary>
    /// Elements for the new item form, to be placed in a MudGrid. The
    /// save and cancel buttons will be added automatically.
    /// </summary>
    [Parameter]
    public RenderFragment NewItemFormElements { get; set; } = builder => { };

    [Parameter]
    public string NewItemTitle { get; set; } = "Nieuw";

    [Parameter]
    public bool NewItemExpanded { get; set; } = false;

    [Parameter]
    public RenderFragment Columns { get; set; } = builder => { };

    [Parameter]
    public RenderFragment ContentAfterData { get; set; } = builder => { };

    [Parameter]
    [EditorRequired]
    public Func<IServerData, Task<IList<TDto>>> DataProvider { get; set; } = default!;

    [Parameter]
    public Func<Task<TDto>> OnCreate { get; set; } = default!;

    [Parameter]
    public EventCallback<TDto> OnUpdate { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public EventCallback<TDto> OnDelete { get; set; }

    [Parameter]
    public bool CanEdit { get; set; }

    [Parameter]
    public bool CanDelete { get; set; }

    [Parameter]
    public bool IsForScoutsjaar { get; set; } = false;

    [Inject]
    public IServerData ServerData { get; set; } = default!;

    [Inject]
    public NavigationManager NavigationManager { get; set; } = default!;

    [Inject]
    public IDialogService DialogService { get; set; } = default!;

    [Inject]
    public ISnackbar Snackbar { get; set; } = default!;

    [Inject]
    public CurrentScoutsjaarQuerystringParameterProvider CurrentScoutsjaarQuerystringParameterProvider { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        _loadingData = true;
        var uriBuilder = new UriBuilder(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uriBuilder.Query);
        var scoutsjaarParameter = query["scoutsjaar"];
        if (scoutsjaarParameter != null)
        {
            _selectedScoutsjaarBegin = int.Parse(scoutsjaarParameter); 
        }

        if (IsForScoutsjaar)
        {
            _scoutsjaren = await ServerData.GetScoutsjaren();
            var selectedScoutsjaar = await CurrentScoutsjaarQuerystringParameterProvider.GetCurrentScoutsjaar();
            if (selectedScoutsjaar != null)
            {
                _selectedScoutsjaarBegin = selectedScoutsjaar.Begin;
                _data = await GetData();
            }
            else
            {
                selectedScoutsjaar = _scoutsjaren.FirstOrDefault();
                NavigationManager.NavigateTo($"{NavigationManager.Uri}?scoutsjaar={selectedScoutsjaar.Begin}", forceLoad: true);
                return;
            }
        }
        else
        {
            _data = await GetData();
        }

        _loadingData = false;
        _persistingSubscription = ApplicationState.RegisterOnPersisting(PersistData);
    }

    private async Task<IList<TDto>> GetData()
    {
        try
        {
            IList<TDto>? result = new List<TDto>();
            if (!ApplicationState.TryTakeFromJson<IList<TDto>>(nameof(_data), out var restoredServerData))
            {
                result = await DataProvider(ServerData);
            }
            else
            {
                result = restoredServerData;
            }

            return result ?? new List<TDto>();
        }
        catch (Exception e)
        {
            Snackbar.Add($"Er is een fout gebeurd: {e.Message}", Severity.Error);
            return new List<TDto>();
        }
    }

    private Task PersistData()
    {
        ApplicationState.PersistAsJson(nameof(_data), _data);
        return Task.CompletedTask;
    }

    async Task Create()
    {
        try
        {
            await _form.Validate();
            if (_form.IsValid)
            {
                var result = await OnCreate();
                AddItem(result);
                await OnCancel.InvokeAsync();
            }
        }
        catch (Exception e)
        {
            Snackbar.Add($"Er is een fout gebeurd: {e.Message}", Severity.Error);
        }
    }

    async Task Delete(TDto dto)
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            CloseButton = true,
        };

        var parameters = new DialogParameters<ConfirmDeleteDialog>
        {
            { x => x.DtoId, dto.GetType().GetProperty("Id")?.GetValue(dto) is int id ? id : 0 }
        };

        var dialog = await DialogService.ShowAsync<ConfirmDeleteDialog>("Bevestig verwijderen", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            try
            {
                await OnDelete.InvokeAsync(dto);
                Snackbar.Add("De gegevens werden succesvol verwijderd.", Severity.Success);
                _data.Remove(dto);
            }
            catch (Exception e)
            {
                Snackbar.Add($"Er is een fout gebeurd: {e.Message}", Severity.Error);
            }
        }
    }

    async Task Update(TDto item)
    {
        try
        {
            await OnUpdate.InvokeAsync(item);
        }
        catch (Exception e)
        {
            Snackbar.Add($"Er is een fout gebeurd: {e.Message}", Severity.Error);
        }
    }

    public void AddItem(TDto item)
    {
        var dataList = _data.ToList();
        dataList.Add(item);
        _data = dataList;
    }

    private async Task OnSelectedScoutsjaarChanged()
    {
        var uriWithoutScoutsjaar = $"{NavigationManager.Uri}?scoutsjaar={_selectedScoutsjaarBegin}";
        var uriBuilder = new UriBuilder(NavigationManager.Uri)
        {
            Query = $"scoutsjaar={_selectedScoutsjaarBegin}"
        };

        NavigationManager.NavigateTo(uriBuilder.Uri.ToString(), forceLoad: true);
    }

    void IDisposable.Dispose() => _persistingSubscription.Dispose();
}
