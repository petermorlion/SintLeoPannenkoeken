@page "/beheer/chauffeurs"
@using SintLeoPannenkoeken.Blazor.Client.Auth
@using SintLeoPannenkoeken.Blazor.Client.Server
@using SintLeoPannenkoeken.Blazor.Client.Server.Contracts

<MasterDetailPage TDto="ChauffeurDto"
                  AuthorizedRoles="@($"{Roles.RolesForChauffeurs}")"
                  Title="Chauffeurs"
                  DataProvider="@_dataProvider"
                  IsForScoutsjaar="true"
                  CanEdit="true"
                  CanDelete="true"
                  OnCreate="@OnCreate"
                  OnUpdate="@OnUpdate"
                  OnCancel="@OnCancel"
                  OnDelete="@OnDelete">
    <NewItemFormElements>
        <MudItem xs="12" sm="6">
            <MudTextField @bind-Value="_newChauffeurAchternaam" T="string" Label="Achternaam" Required="true" RequiredError="De achternaam is verplicht." Variant="Variant.Outlined" Margin="Margin.Dense" ShrinkLabel />
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudTextField @bind-Value="_newChauffeurVoornaam" T="string" Label="Voornaam" Required="true" RequiredError="De voornaam is verplicht." Variant="Variant.Outlined" Margin="Margin.Dense" ShrinkLabel />
        </MudItem>
    </NewItemFormElements>
    <Columns>
        <PropertyColumn T="ChauffeurDto" TProperty="string" Property="x => x.Achternaam" Title="Achternaam" InitialDirection="SortDirection.Ascending" />
        <PropertyColumn T="ChauffeurDto" TProperty="string" Property="x => x.Voornaam" Title="Voornaam" />
        <TemplateColumn T="ChauffeurDto" CellClass="justify-end">
            <CellTemplate>
                <MudIconButton title="Zones voor deze chauffeur"
                    Size="@Size.Small" 
                    Icon="@Icons.Material.Outlined.DirectionsCar" 
                    Color="Color.Primary" 
                    Href="@($"chauffeurs/rondes?bestuurderId={context.Item.Id}&scoutsjaar={_currentScoutsjaar}")" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MasterDetailPage>

@code {
    private Func<IServerData, Task<IList<ChauffeurDto>>> _dataProvider => async (serverData) => await serverData.GetChauffeurs();
    private int _currentScoutsjaar;

    private string _newChauffeurAchternaam = "";
    private string _newChauffeurVoornaam = "";

    [Inject]
    private IServerData _serverData { get; set; } = default!;

    [Inject]
    private CurrentScoutsjaarQuerystringParameterProvider _currentScoutsjaarQuerystringParameterProvider { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var currentScoutsjaar = await _currentScoutsjaarQuerystringParameterProvider.GetCurrentScoutsjaar();
        _currentScoutsjaar = currentScoutsjaar.Begin;
    }

    async Task OnUpdate(ChauffeurDto item)
    {
        await _serverData.UpdateChauffeur(item);
    }

    async Task OnDelete(ChauffeurDto item)
    {
        await _serverData.DeleteChauffeur(item.Id);
    }

    async Task<ChauffeurDto> OnCreate()
    {
        var newItem = new ChauffeurDto
        {
            Achternaam = _newChauffeurAchternaam,
            Voornaam = _newChauffeurVoornaam
        };

        var result = await _serverData.CreateChauffeur(newItem);
        return result;
    }

    void OnCancel()
    {
        _newChauffeurAchternaam = "";
        _newChauffeurVoornaam = "";
    }
}
