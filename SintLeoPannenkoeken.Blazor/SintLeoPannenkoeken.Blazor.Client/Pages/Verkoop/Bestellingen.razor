@page "/bestellingen"
@using SintLeoPannenkoeken.Blazor.Client.Auth
@using SintLeoPannenkoeken.Blazor.Client.Server
@using SintLeoPannenkoeken.Blazor.Client.Server.Contracts
@using System.Linq;

<MasterDetailPage TDto="BestellingDto"
                  AuthorizedRoles="@($"{Roles.RolesForBestellingen}")"
                  Title="Bestellingen"
                  DataProvider="@_dataProvider"
                  OnUpdate="@OnUpdate"
                  OnCancel="@OnCancel"
                  OnCreate="@OnCreate"
                  CanEdit="false"
                  IsForScoutsjaar="true"
                  NewItemTitle="Nieuwe bestelling"
                  NewItemExpanded="true">
    <NewItemFormElements>
        <MudItem xs="12" sm="8">
                    <MudTextField T="string" Label="Naam koper" Required="true" RequiredError="Naam koper is verplicht." Variant="Variant.Outlined" Margin="Margin.Dense" ShrinkLabel />
                </MudItem>
                <MudItem xs="12" sm="4">
                    <MudTextField T="string" Label="Telefoon" Variant="Variant.Outlined" Margin="Margin.Dense" ShrinkLabel />
                </MudItem>

                <MudItem xs="12" sm="2">
                    <MudCheckBox T="bool" Label="Zelf afhalen" />
                </MudItem>
                <MudItem xs="12" sm="5">
                    <MudAutocomplete @bind-Value="_selectedStraat"
                                     SearchFunc="SearchStreets"
                                     ToStringFunc="_straatConverter"
                                     Variant="Variant.Outlined"
                                     Label="Straat"
                                     Margin="Margin.Dense"
                                     MaxItems=100
                                     Clearable="true"
                                     CoerceText="true"
                                     ResetValueOnEmptyText="true"
                                     SelectValueOnTab="true" />
                </MudItem>
                <MudItem xs="12" sm="2">
                    <MudTextField T="string"
                                  Label="Code"
                                  Value="@($"{_selectedStraat?.ZoneNaam} {_selectedStraat?.Nummer}")"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  ShrinkLabel
                                  Disabled />
                </MudItem>
                <MudItem xs="12" sm="2">
                    <MudTextField T="string" Label="Nummer" Variant="Variant.Outlined" Margin="Margin.Dense" ShrinkLabel />
                </MudItem>
                <MudItem xs="12" sm="1">
                    <MudTextField T="string" Label="Bus" Variant="Variant.Outlined" Margin="Margin.Dense" ShrinkLabel />
                </MudItem>

                <MudItem xs="12" sm="2">
                    <MudNumericField T="int" Label="Aantal pakken" Min="0" Variant="Variant.Outlined" Margin="Margin.Dense" ShrinkLabel />
                </MudItem>
                <MudItem xs="12" sm="2">
                    <MudCheckBox T="bool" Label="Betaald" Value="true" />
                </MudItem>
                <MudItem xs="12" sm="2">
                    <MudCheckBox T="bool" Label="Geleverd" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField T="string" Label="Opmerkingen" Variant="Variant.Outlined" Margin="Margin.Dense" ShrinkLabel />
                </MudItem>

                <MudItem xs="12">
                    <MudAutocomplete SearchFunc="SearchLeden"
                                     ToStringFunc="_lidConverter"
                                     Variant="Variant.Outlined"
                                     Label="Lid"
                                     Margin="Margin.Dense"
                                     MaxItems=100
                                     Clearable="true"
                                     CoerceText="true"
                                     ResetValueOnEmptyText="true"
                                     SelectValueOnTab="true" />
                </MudItem>
    </NewItemFormElements>
    
    <Columns>
        <PropertyColumn T="BestellingDto" TProperty="int" Property="x => x.BestellingNummer" Title="Nr" />
        <PropertyColumn T="BestellingDto" TProperty="string" Property="x => x.Naam" Title="Koper" />
        <PropertyColumn T="BestellingDto" TProperty="string" Property="x => x.Telefoon" Title="Telefoon" />
        @* <PropertyColumn T="BestellingDto" TProperty="string" Property="x => x." Title="Code" />
        <PropertyColumn T="BestellingDto" TProperty="string" Property="x => x." Title="Adres" /> *@
        <PropertyColumn T="BestellingDto" TProperty="int" Property="x => x.AantalPakken" Title="Aantal pakken" />
        <PropertyColumn T="BestellingDto" TProperty="string" Property="x => x.Opmerkingen" Title="Opmerkingen" />
        @* <PropertyColumn T="BestellingDto" TProperty="bool" Property="x => x.Betaald" Title="Betaald" />
        <PropertyColumn T="BestellingDto" TProperty="bool" Property="x => x.Geleverd" Title="Geleverd" />
        <PropertyColumn T="BestellingDto" TProperty="string" Property="x => x.LidNaam" Title="Lid" />
        <PropertyColumn T="BestellingDto" TProperty="string" Property="x => x.TakNaam" Title="Tak" /> *@
    </Columns>
</MasterDetailPage>

@code {
    private Func<IServerData, Task<IEnumerable<BestellingDto>>> _dataProvider => async (serverData) => await serverData.GetBestellingen(2025);

    [Inject]
    private IServerData _serverData { get; set; } = default!;

    private IList<LidDto> _leden = [];
    private IList<StraatDto> _straten = [];

    private bool _isFormValid;
    private StraatDto? _selectedStraat = null;

    private Func<LidDto, string> _lidConverter = lid =>
    {
        if (lid == null)
        {
            return "";
        }

        return $"{lid.Achternaam} {lid.Voornaam} ({lid.TakNaam})";
    };

    private Func<StraatDto, string> _straatConverter = straat => 
    {
        if (straat == null)
        {
            return "";
        }

        return $"{straat.Naam} ({straat.Gemeente})";
    };

    private async Task<IEnumerable<StraatDto>> SearchStreets(string value, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            return _straten;
        }

        return _straten.Where(x => x.Naam.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<LidDto>> SearchLeden(string value, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            return _leden;
        }

        return _leden.Where(x => 
            x.Achternaam.Contains(value, StringComparison.InvariantCultureIgnoreCase)
            || x.Voornaam.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    async Task<BestellingDto> OnCreate()
    {
        throw new NotImplementedException();
    }

    void OnCancel()
    {
        throw new NotImplementedException();
    }

    async Task OnUpdate(BestellingDto item)
    {
        var updateBestellingDto = new UpdateBestellingDto
        {
            Id = item.Id,
            Naam = item.Naam,
            Telefoon = item.Telefoon,
            AantalPakken = item.AantalPakken,
            Opmerkingen = item.Opmerkingen,
            Betaald = item.Betaald,
            Geleverd = item.Geleverd,
            LidId = item.Lid?.Id ?? 0,
            StraatId = item.StraatId,
            Nummer = item.Nummer,
            Bus = item.Bus
        };

        await _serverData.UpdateBestelling(updateBestellingDto);
    }

    protected override async Task OnInitializedAsync()
    {
        _leden = (await _serverData.GetLeden()).OrderBy(lid => lid.Achternaam).ThenBy(lid => lid.Voornaam).ToList();
        _straten = (await _serverData.GetStraten()).OrderBy(straat => straat.Naam).ToList();

        await base.OnInitializedAsync();
    }
}

