@model SintLeoPannenkoeken.ViewModels.Rapporten.VerkoopPerTakViewModel;
@{
    ViewData["Title"] = "Verkoop per tak";
}

<div id="rapporten" class="container-fluid">
    <h1 class="display-4">
        @ViewData["Title"]
        @await Component.InvokeAsync("Scoutsjaar", new { selectedScoutsjaar = Model.ScoutsjaarBegin })
    </h1>
    
    <div id="rapport">
        <canvas id="chart"></canvas>
    </div>
</div>

@section Scripts
{
    <script src="https://unpkg.com/chart.js@4.2.0/dist/chart.umd.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/chartjs-plugin-annotation/3.0.1/chartjs-plugin-annotation.min.js" integrity="sha512-Hn1w6YiiFw6p6S2lXv6yKeqTk0PLVzeCwWY9n32beuPjQ5HLcvz5l2QsP+KilEr1ws37rCTw3bZpvfvVIeTh0Q==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script>
        const data = @Html.Raw(Json.Serialize(Model));
        const rapport = document.getElementById('chart');
        const chart = new Chart(
            rapport,
            {
                type: 'bar',
                data: {
                    labels: data.takVerkoopViewModels.map(getRowLabel),
                    datasets: [
                        {
                            label: 'Verkoop',
                            data: data.takVerkoopViewModels.map(row => row.aantalPakkenVerkocht)
                        }
                    ]
                },
                options: {
                    indexAxis: 'y',
                    plugins: {
                        annotation: {
                            annotations: getStreefcijferAnnotations(data)
                        }
                    },
                    scales: {
                        y: {
                            grid: {
                                lineWidth: 1,
                                color: 'black'
                            }
                        }
                    }
                }
            }
        );

        function getRowLabel(row) {
            return [
                row.naam,
                `Verkocht: ${row.aantalPakkenVerkocht}`,
                `Streefcijfer: ${row.streefcijfer}`,
                `% Verkocht: ${(row.aantalPakkenVerkocht / row.streefcijfer * 100).toFixed(2)}%`,
                `Leden: ${row.leden}`                
            ]
        }

        function getStreefcijferAnnotations(data) {
            var annotations = {};
            for (var i = 0; i < data.takVerkoopViewModels.length; i++) {
                var row = data.takVerkoopViewModels[i];
                annotations['line' + i] = {
                    type: 'line',
                    xMin: row.streefcijfer,
                    xMax: row.streefcijfer,
                    yMin: i - 0.5,
                    yMax: i + 0.5,
                    borderColor: '#7C9885',
                    borderWidth: 2,
                    label: {
                        display: true,
                        content: row.streefcijfer
                    }
                };

                annotations['label' + i] = {
                    type: 'label',
                    xValue: row.aantalPakkenVerkocht,
                    yValue: i,
                    content: row.aantalPakkenVerkocht,
                    backgroundColor: '#0d6efd',
                    color: 'white',
                    borderRadius: 6
                };
            }

            return annotations;
        }
    </script>
}