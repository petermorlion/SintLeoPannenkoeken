@model SintLeoPannenkoeken.ViewModels.Rapporten.ZoneDetailsViewModel;
@{
    ViewData["Title"] = "Zone " + Model.ZoneNaam;
}

<div id="rapporten" class="container-fluid">
    <h1 class="display-4">@ViewData["Title"]</h1>
    <h2>@Model.ZoneNaam - @Model.PostNummer @Model.Gemeente - @Model.Bestuurder - @Model.ScoutsjaarBegin</h2>
    <p>Pakjes geleverd: @Model.AantalGeleverd / niet geleverd: @Model.AantalNietGeleverd / totaal: @Model.Aantal</p>
    <table id="zoneTable" class="table table-striped">
        <thead>
            <tr>
                <th>Nr</th>
                <th>Bus</th>
                <th>Straat</th>
                <th>Naam</th>
                <th>Aantal</th>
                <th></th>
            </tr>
        </thead>
    </table>
</div>

@section Scripts {
    <script>
        async function initTable(){
            var json = @Json.Serialize(Model.Bestellingen);
            $('#zoneTable').DataTable({
                destroy: true,
                data: json,
                dom: 'Bfrtip',
                order: [[2, 'asc'], [0, 'asc']],
                buttons: [
                    {
                        extend: 'print',
                        customize: function (win) {
                            $(win.document.body)
                                .prepend(
                                    '<h2>@Model.ZoneNaam - @Model.PostNummer @Model.Gemeente - @Model.Bestuurder - @Model.ScoutsjaarBegin</h2>'
                                    +
                                    '<p>Pakjes geleverd: @Model.AantalGeleverd / niet geleverd: @Model.AantalNietGeleverd / totaal: @Model.Aantal</p>'
                                );
                            $(win.document.body).find('h1').remove();
                        }
                    }
                ],
                pageLength: 1000,
                lengthMenu: [250, 500, 1000],
                language: {
                    url: 'https://cdn.datatables.net/plug-ins/1.13.1/i18n/nl-NL.json'
                },
                columns: [
                    { data: 'straat' },
                    { data: 'nummer' },
                    { data: 'bus' },
                    { data: 'naam' },
                    { data: 'aantal' },
                    {
                        title: 'Geleverd',
                        orderable: false,
                        data: function (row, type, val, meta) {
                            return `<span class="d-none">` + getGeleverdSearchValue(row.geleverd) + `</span><a href='#' onclick="toggleDeliveryStatus(${row.bestellingId})" id='${row.bestellingId}' data-geleverd='${row.geleverd}' title="` + getGeleverdText(row.geleverd) + `" class="` + getGeleverdClass(row.geleverd) + `"><i class="bi bi-house-check-fill"></i></a>`;
                        }
                    }
                ],
                initComplete: function() {
                    var columnIndex = 5;
                    var api = this.api();
                    var headerCell = api.column(columnIndex).header();
                    var select = $('<select class="ms-3"><option value="">Alle</option><option value="Ja">Ja</option><option value="Nee">Nee</option></select>');
                    select.on('change', function (e) { 
                        var selectedValue = this.value;
                        api.column(columnIndex).search(selectedValue).draw();
                    });
                    $(headerCell).append(select);
                }
            });
        }

        function getGeleverdSearchValue(geleverd) {
            if (geleverd) {
                return 'Ja';
            } else {
                return 'Nee';
            }
        }

        function getGeleverdText(geleverd) {
            if (geleverd) {
                return 'Bestelling is geleverd. Klik om te markeren als niet geleverd.';
            } else {
                return 'Bestelling is niet geleverd. Klik om te markeren als geleverd';
            }
        }

        function getGeleverdClass(geleverd) {
            if (geleverd) {
                return 'text-success';
            } else {
                return 'text-muted';
            }
        }

        async function toggleDeliveryStatus(bestellingId) {
            var geleverd = $(`#${bestellingId}`).data('geleverd');
            var response = await fetch(`/api/bestellingen/${bestellingId}/delivery`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(
                    {
                        geleverd: !geleverd
                    })
            });

            if (!response.ok) {
                var errorMessage = await (response.text());
                alert(errorMessage);
            } else {
                $(`#${bestellingId}`).data('geleverd', !geleverd);
                $(`#${bestellingId}`).prop('title', getGeleverdText(!geleverd));
                $(`#${bestellingId}`).removeClass(getGeleverdClass(geleverd));
                $(`#${bestellingId}`).addClass(getGeleverdClass(!geleverd));
            }
        }
    
        $(async function () {
            await initTable();
        });
    </script>
}